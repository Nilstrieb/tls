use std::{
    fmt::Debug,
    io::{self, Read, Write},
    marker::PhantomData,
    num::TryFromIntError,
};

use byteorder::{BigEndian as B, ReadBytesExt, WriteBytesExt};

use crate::ErrorKind;

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum TLSPlaintext {
    Invalid {
        legacy_version: ProtocolVersion,
        fragment: List<u8, u16>,
    },
    ChangeCipherSpec,
    Alert {
        alert: Alert,
    },
    Handshake {
        handshake: Handshake,
    },
    ApplicationData,
}

impl TLSPlaintext {
    const INVALID: u8 = 0;
    const CHANGE_CIPHER_SPEC: u8 = 20;
    const ALERT: u8 = 21;
    const HANDSHAKE: u8 = 22;
    const APPLICATION_DATA: u8 = 23;

    pub fn write(&self, w: &mut impl Write) -> io::Result<()> {
        match self {
            TLSPlaintext::Invalid { .. } => todo!(),
            TLSPlaintext::ChangeCipherSpec => todo!(),
            TLSPlaintext::Alert { .. } => todo!(),
            TLSPlaintext::Handshake { handshake } => {
                Self::HANDSHAKE.write(w)?;
                // MUST be set to 0x0303 for all records
                // generated by a TLS 1.3 implementation other than an initial
                // ClientHello (i.e., one not generated after a HelloRetryRequest),
                // where it MAY also be 0x0301 for compatibility purposes.
                if matches!(handshake, Handshake::ClientHello { .. }) {
                    LEGACY_TLSV10.write(w)?;
                } else {
                    LEGACY_TLSV12.write(w)?;
                }
                let len: u16 = handshake.byte_size().try_into().unwrap();
                len.write(w)?;
                handshake.write(w)?;
                Ok(())
            }
            TLSPlaintext::ApplicationData => todo!(),
        }
    }

    pub fn read(r: &mut impl Read) -> crate::Result<Self> {
        let discr = u8::read(r)?;
        let _legacy_version = ProtocolVersion::read(r)?;
        let _len = u16::read(r)?;
        match discr {
            Self::INVALID => todo!(),
            Self::CHANGE_CIPHER_SPEC => todo!(),
            Self::ALERT => {
                let alert = Alert::read(r)?;
                Ok(Self::Alert { alert })
            }
            Self::HANDSHAKE => {
                let handshake = Handshake::read(r)?;
                Ok(TLSPlaintext::Handshake { handshake })
            }
            Self::APPLICATION_DATA => todo!(),
            _ => {
                return Err(crate::ErrorKind::InvalidFrame(Box::new(format!(
                    "Invalid record discriminant: {discr}"
                )))
                .into())
            }
        }
    }
}

pub type ProtocolVersion = u16;
pub type Random = [u8; 32];

// https://datatracker.ietf.org/doc/html/rfc8446#section-4
proto_enum! {
    #[derive(Debug, Clone, PartialEq, Eq)]
    pub enum Handshake: u8, (length: u24) {
        // https://datatracker.ietf.org/doc/html/rfc8446#section-4.1.2
        ClientHello {
            legacy_version: ProtocolVersion,
            random: Random,
            legacy_session_id: LegacySessionId,
            cipher_suites: List<CipherSuite, u16>,
            legacy_compressions_methods: List<u8, u8>,
            extensions: List<ExtensionCH, u16>,
        } = 1,
        ServerHello {
            legacy_version: ProtocolVersion,
            random: Random,
            legacy_session_id_echo: LegacySessionId,
            cipher_suite: CipherSuite,
            legacy_compression_method: u8,
            extensions: List<ExtensionSH, u16>,
        } = 2,
        NewSessionTicket {} = 4,
        EndOfEarlyData {} = 5,
        EncryptedExtensions {} = 8,
        Certificate {} = 11,
        CertificateRequest {} = 13,
        CertificateVerify {} = 15,
        Finished {} = 20,
        KeyUpdate {} = 24,
        MessageHash {} = 254,
    }
}

pub const HELLO_RETRY_REQUEST: [u8; 32] = [
    0xCF, 0x21, 0xAD, 0x74, 0xE5, 0x9A, 0x61, 0x11, 0xBE, 0x1D, 0x8C, 0x02, 0x1E, 0x65, 0xB8, 0x91,
    0xC2, 0xA2, 0x11, 0x16, 0x7A, 0xBB, 0x8C, 0x5E, 0x07, 0x9E, 0x09, 0xE2, 0xC8, 0xA8, 0x33, 0x9C,
];

pub const LEGACY_TLSV10: ProtocolVersion = 0x0301;
pub const LEGACY_TLSV12: ProtocolVersion = 0x0303;
pub const TLSV13: ProtocolVersion = 0x0304;

type LegacySessionId = List<u8, u8>;

proto_enum! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq)]
    pub enum CipherSuite: [u8; 2] {
        TlsAes128GcmSha256 = [0x13, 0x01],
        TlsAes256GcmSha384 = [0x13, 0x02],
        TlsChacha20Poly1305Sha256 = [0x13, 0x03],
        TlsAes128CcmSha256 = [0x13, 0x04],
        TlsAes128Ccm8Sha256 = [0x13, 0x05],
    }
}

proto_enum! {
    #[derive(Debug, Clone, PartialEq, Eq)]
    pub enum ExtensionCH: u16, (length: u16) {
        ServerName {
            server_name: ServerNameList,
        } = 0,
        MaxFragmentLength { todo: Todo, } = 1,
        StatusRequest { todo: Todo, } = 5,
        SupportedGroups {
            groups: NamedGroupList,
        } = 10,
        ECPointFormat {
            formats: ECPointFormatList,
        } = 11,
        SignatureAlgorithms{ todo: Todo, } = 13,
        UseSrtp{ todo: Todo, } = 14,
        Heartbeat { todo: Todo, }= 15,
        ApplicationLayerProtocolNegotiation{ todo: Todo, } = 16,
        SignedCertificateTimestamp{ todo: Todo, } = 18,
        ClientCertificateType{ todo: Todo, } = 19,
        ServerCertificateType { todo: Todo, }= 20,
        Padding{ todo: Todo, } = 21,
        PreSharedKey { todo: Todo, }= 41,
        EarlyData{ todo: Todo, } = 42,
        SupportedVersions {
            versions: List<ProtocolVersion, u8>,
        } = 43,
        Cookie{ todo: Todo, } = 44,
        PskKeyExchangeModes { todo: Todo, }= 45,
        CertificateAuthorities { todo: Todo, }= 47,
        PostHandshakeAuth { todo: Todo, }= 49,
        SignatureAlgorithmsCert{ todo: Todo, } = 50,
        KeyShare { todo: Todo, }= 51,
    }
}

proto_enum! {
    #[derive(Debug, Clone, PartialEq, Eq)]
    pub enum ExtensionSH: u16, (length: u16) {
        PreSharedKey = 41,
        SupportedVersions {
            selected_version: ProtocolVersion,
        } = 43,
        Cookie { todo: Todo, } = 44,
        KeyShare {
            group: NamedGroup,
        } = 51,
    }
}

proto_enum! {
    #[derive(Debug, Clone, PartialEq, Eq)]
    pub enum ServerName: u8 {
        HostName {
            host_name: HostName,
        } = 0,
    }
}

type HostName = List<u8, u16>;
type ServerNameList = List<ServerName, u16>;

proto_enum! {
    #[derive(Debug, Clone, PartialEq, Eq)]
    pub enum ECPointFormat: u8 {
        Uncompressed = 0,
    }
}
type ECPointFormatList = List<ECPointFormat, u8>;

proto_enum! {
    #[derive(Debug, Clone, PartialEq, Eq)]
    pub enum NamedGroup: u16 {
        /* Elliptic Curve Groups (ECDHE) */
        Secp256r1 = 0x0017,
        Secp384r1 = 0x0018,
        Secp521r1 = 0x0019,
        X25519 = 0x001D,
        X448 = 0x001E,

        /* Finite Field Groups (DHE) */
        Ffdhe2048 = 0x0100,
        Ffdhe3072 = 0x0101,
        Ffdhe4096 = 0x0102,
        Ffdhe6144 = 0x0103,
        Ffdhe8192 = 0x0104,
    }
}
type NamedGroupList = List<NamedGroup, u16>;

proto_struct! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq)]
    pub struct Alert {
        level: AlertLevel,
        description: AlertDescription,
    }
}

proto_enum! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq)]
    pub enum AlertLevel: u8 {
        Warning = 1,
        Fatal = 2,
    }
}

proto_enum! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq)]
    pub enum AlertDescription: u8 {
        CloseNotify = 0,
        UnexpectedMessage = 10,
        BadRecordMac = 20,
        RecordOverflow = 22,
        HandshakeFailure = 40,
        BadCertificate = 42,
        UnsupportedCertificate = 43,
        CertificateRevoked = 44,
        CertificateExpired = 45,
        CertificateUnknown = 46,
        IllegalParameter = 47,
        UnknownCa = 48,
        AccessDenied = 49,
        DecodeError = 50,
        DecryptError = 51,
        ProtocolVersion = 70,
        InsufficientSecurity = 71,
        InternalError = 80,
        InappropriateFallback = 86,
        UserCanceled = 90,
        MissingExtension = 109,
        UnsupportedExtension = 110,
        UnrecognizedName = 112,
        BadCertificateStatusResponse = 113,
        UnknownPskIdentity = 115,
        CertificateRequired = 116,
        NoApplicationProtocol = 120,
    }
}

macro_rules! proto_struct {
    {$(#[$meta:meta])* pub struct $name:ident {
        $(
            $field_name:ident : $field_ty:ty,
        )*
    }} => {
        $(#[$meta])*
        pub struct $name {
            $(
                $field_name: $field_ty,
            )*
        }


        impl Value for $name {
            fn write<W: Write>(&self, mut w: &mut W) -> io::Result<()> {
                $(
                    Value::write(&self.$field_name, &mut w)?;
                )*
                Ok(())
            }

            fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
                let ( $( $field_name ),* ) = ($( { discard!($field_name); Value::read(r)? } ),*);

                Ok(Self {
                    $(
                        $field_name,
                    )*
                })
            }

            fn byte_size(&self) -> usize {
                $( self.$field_name.byte_size() + )* 0
            }
        }
    };
}
use proto_struct;

macro_rules! proto_enum {
    {$(#[$meta:meta])* pub enum $name:ident: $discr_ty:ty $( ,(length: $len_ty:ty) )? {
        $(
            $KindName:ident $({
                $(
                    $field_name:ident : $field_ty:ty,
                )*
            })? = $discriminant:expr,
        )*
    }} => {
        $(#[$meta])*
        pub enum $name {
            $(
                $KindName $({
                    $(
                        $field_name: $field_ty,
                    )*
                })?,
            )*
        }

        impl Value for $name {
            fn write<W: Write>(&self, w: &mut W) -> io::Result<()> {
                w.flush()?;
                eprintln!("{}", stringify!($name));
                mod discr_consts {
                    $(
                        #[allow(non_upper_case_globals)]
                        pub(super) const $KindName: $discr_ty = $discriminant;
                    )*
                }

                let write_len = |_w: &mut W, _len: usize| -> io::Result<()> {
                    _w.flush()?;
                    eprintln!("length");
                    $(
                        <$len_ty>::try_from(_len).unwrap().write(_w)?;
                    )?
                    Ok(())
                };

                match self {
                    $(
                        Self::$KindName $( {
                            $( $field_name, )*
                        } )? => {
                            let byte_size = $($( $field_name.byte_size() + )*)? 0;

                            Value::write(&discr_consts::$KindName, w)?;
                            write_len(w, byte_size)?;

                            let w = &mut MeasuringWriter(0, w);

                            $($(
                                w.flush()?;
                                eprintln!("{}", stringify!($field_name));
                                Value::write($field_name, w)?;
                            )*)?

                            debug_assert_eq!(w.0, byte_size);

                            Ok(())
                        }
                    )*
                }
            }

            fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
                mod discr_consts {
                    $(
                        #[allow(non_upper_case_globals)]
                        pub(super) const $KindName: $discr_ty = $discriminant;
                    )*
                }

                let kind: $discr_ty = Value::read(r)?;

                $(
                    let _len = <$len_ty>::read(r)?;
                )?

                match kind {
                    $(
                        discr_consts::$KindName => {
                            #[allow(unused_parens)]
                            $(let ( $( $field_name ),* ) = ($( { discard!($field_name); Value::read(r)? } ),*);)?

                            Ok(Self::$KindName $({
                                $(
                                    $field_name,
                                )*
                            })*)
                        },
                    )*

                    _ => Err(ErrorKind::InvalidFrame(Box::new(format!("invalid discriminant for {}: 0x{kind:x?}", stringify!($name)))).into()),
                }
            }

            fn byte_size(&self) -> usize {
                mod discr_consts {
                    $(
                        #[allow(non_upper_case_globals)]
                        pub(super) const $KindName: $discr_ty = $discriminant;
                    )*
                }

                $( <$len_ty>::default().byte_size() + )? match self {
                    $(
                        Self::$KindName $( {
                            $( $field_name, )*
                        } )? => {
                            $( $( $field_name.byte_size() + )* )? discr_consts::$KindName.byte_size()
                        }
                    )*
                }
            }
        }
    };
}
use proto_enum;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Todo;

impl Value for Todo {
    fn write<W: Write>(&self, w: &mut W) -> io::Result<()> {
        todo!()
    }

    fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
        todo!()
    }

    fn byte_size(&self) -> usize {
        todo!()
    }
}

#[derive(Clone, PartialEq, Eq)]
pub struct List<T, Len>(Vec<T>, PhantomData<Len>);

impl<T, Len: Value> From<Vec<T>> for List<T, Len> {
    fn from(value: Vec<T>) -> Self {
        Self(value, PhantomData)
    }
}

impl<T: Debug, Len> Debug for List<T, Len> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_list().entries(self.0.iter()).finish()
    }
}

impl<T: Value, Len: Value + Into<usize> + TryFrom<usize> + Default> Value for List<T, Len> {
    fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
        let mut remaining_byte_size = Len::read(r)?.into();
        let mut v = Vec::new();

        while remaining_byte_size > 0 {
            let value = T::read(r)?;
            remaining_byte_size -= value.byte_size();
            v.push(value);
        }
        Ok(Self(v, PhantomData))
    }
    fn write<W: Write>(&self, w: &mut W) -> io::Result<()> {
        let byte_size = self.0.iter().map(Value::byte_size).sum::<usize>();
        Len::write(
            &byte_size
                .try_into()
                .unwrap_or_else(|_| panic!("list is too large for domain: {}", self.0.len())),
            w,
        )?;
        for elem in &self.0 {
            elem.write(w)?;
        }
        Ok(())
    }
    fn byte_size(&self) -> usize {
        Len::byte_size(&Default::default()) + self.0.iter().map(Value::byte_size).sum::<usize>()
    }
}

pub trait Value: Sized + std::fmt::Debug {
    fn write<W: Write>(&self, w: &mut W) -> io::Result<()>;
    fn read<R: Read>(r: &mut R) -> crate::Result<Self>;
    fn byte_size(&self) -> usize;
}

impl<V: Value, const N: usize> Value for [V; N] {
    fn write<W: Write>(&self, w: &mut W) -> io::Result<()> {
        self.iter().try_for_each(|v| Value::write(v, w))
    }
    fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
        // ugly :(
        let mut values = Vec::with_capacity(N);
        for _ in 0..N {
            let value = V::read(r)?;
            values.push(value);
        }
        Ok(values.try_into().unwrap())
    }
    fn byte_size(&self) -> usize {
        self.iter().map(Value::byte_size).sum()
    }
}

impl Value for u8 {
    fn write<W: Write>(&self, w: &mut W) -> io::Result<()> {
        w.write_u8(*self)
    }
    fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
        r.read_u8().map_err(Into::into)
    }
    fn byte_size(&self) -> usize {
        1
    }
}

impl Value for u16 {
    fn write<W: Write>(&self, w: &mut W) -> io::Result<()> {
        w.write_u16::<B>(*self)
    }
    fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
        r.read_u16::<B>().map_err(Into::into)
    }
    fn byte_size(&self) -> usize {
        2
    }
}

impl Value for u32 {
    fn write<W: Write>(&self, w: &mut W) -> io::Result<()> {
        w.write_u32::<B>(*self)
    }

    fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
        r.read_u32::<B>().map_err(Into::into)
    }

    fn byte_size(&self) -> usize {
        4
    }
}

impl<T: Value, U: Value> Value for (T, U) {
    fn write<W: Write>(&self, w: &mut W) -> io::Result<()> {
        T::write(&self.0, w)?;
        T::write(&self.0, w)?;
        Ok(())
    }

    fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
        Ok((T::read(r)?, U::read(r)?))
    }

    fn byte_size(&self) -> usize {
        self.0.byte_size() + self.1.byte_size()
    }
}

#[derive(Debug, Clone, Copy, Default)]
#[allow(non_camel_case_types)]
struct u24(u32);

impl Value for u24 {
    fn write<W: Write>(&self, w: &mut W) -> io::Result<()> {
        w.write_u24::<B>(self.0)
    }

    fn read<R: Read>(r: &mut R) -> crate::Result<Self> {
        r.read_u24::<B>().map_err(Into::into).map(u24)
    }

    fn byte_size(&self) -> usize {
        3
    }
}

impl TryFrom<usize> for u24 {
    type Error = TryFromIntError;
    fn try_from(value: usize) -> Result<Self, Self::Error> {
        let value = u32::try_from(value)?;
        if value > 2_u32.pow(24) {
            return Err(u32::try_from(usize::MAX).unwrap_err());
        }
        Ok(u24(value))
    }
}

struct MeasuringWriter<W>(usize, W);

impl<W: Write> Write for MeasuringWriter<W> {
    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
        let len = self.1.write(buf)?;
        self.0 += len;
        Ok(len)
    }

    fn flush(&mut self) -> io::Result<()> {
        self.1.flush()
    }
}

macro_rules! discard {
    ($($tt:tt)*) => {};
}
use discard;

#[cfg(test)]
mod tests;
